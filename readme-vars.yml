---

# project information
project_name: blender
project_url: "https://www.blender.org/"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/blender-logo.png"
project_blurb: "[Blender]({{ project_url }}) is a free and open-source 3D computer graphics software toolset used for creating animated films, visual effects, art, 3D printed models, motion graphics, interactive 3D applications, virtual reality, and computer games. **This image does not support GPU rendering out of the box only accelerated workspace experience**"
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_blurb_optional_extras_enabled: false

# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
  - { arch: "{{ arch_armhf }}", tag: "arm32v7-latest"}

# development version
development_versions: false

# container parameters
common_param_env_vars_enabled: true
param_container_name: "{{ project_name }}"
param_usage_include_env: true
param_env_vars:
  - { env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London" }
param_usage_include_vols: true
param_volumes:
  - { vol_path: "/config", vol_host_path: "/path/to/config", desc: "Users home directory in the container, stores local files and settings" }
param_usage_include_ports: true
param_ports:
  - { external_port: "3000", internal_port: "3000", port_desc: "Blender desktop gui" }
opt_param_usage_include_env: true
opt_param_env_vars:
  - { env_var: "SUBFOLDER", env_value: "/", desc: "Specify a subfolder to use with reverse proxies, IE `/subfolder/`"}
  - { env_var: "KEYBOARD", env_value: "en-us-qwerty", desc: "See the keyboard layouts section for more information and options."}
opt_param_device_map: true
opt_param_devices:
  - { device_path: "/dev/dri", device_host_path: "/dev/dri", desc: "Add this for hardware acceleration (Linux hosts only)" }
opt_security_opt_param: true
opt_security_opt_param_vars:
  - { run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, this may be required depending on your Docker and storage configuration." }

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  The application can be accessed at:
  * http://yourhost:3000/
  
  By default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:
  
  * http://yourhost:3000/?login=true
  
  You can also force login on the '/' path without this parameter by passing the environment variable `-e AUTO_LOGIN=false`.

  ## Hardware Acceleration
  
  This only applies to your desktop experience, this container is capable of supporting accelerated rendering with /dev/dri mounted in, but the AMD HIP and Nvidia CUDA runtimes are massive which are not installed by default in this container.
  
  ### Intel/ATI/AMD
  
  To leverage hardware acceleration you will need to mount /dev/dri video device inside of the conainer.
  ```
  --device=/dev/dri:/dev/dri
  ```
  We will automatically ensure the abc user inside of the container has the proper permissions to access this device.

  ### Nvidia
  
  Hardware acceleration users for Nvidia will need to install the container runtime provided by Nvidia on their host, instructions can be found here:
  https://github.com/NVIDIA/nvidia-docker
  
  We automatically add the necessary environment variable that will utilise all the features available on a GPU on the host. Once nvidia-docker is installed on your host you will need to re/create the docker container with the nvidia container runtime `--runtime=nvidia` and add an environment variable `-e NVIDIA_VISIBLE_DEVICES=all` (can also be set to a specific gpu's UUID, this can be discovered by running `nvidia-smi --query-gpu=gpu_name,gpu_uuid --format=csv` ). NVIDIA automatically mounts the GPU and drivers from your host into the container.

  ### Arm Devices

  Arm devices can run this image, but generally should not mount in /dev/dri. The OpenGL ES version is not high enough to run Blender. The program can run on these platforms though, leveraging CPU LLVMPipe rendering.
  
  #### Keyboard Layouts
  
  This should match the layout on the computer you are accessing the container from.
  The keyboard layouts available for use are:
  * da-dk-qwerty- Danish keyboard
  * de-ch-qwertz- Swiss German keyboard (qwertz)
  * de-de-qwertz- German keyboard (qwertz) - **OSK available**
  * en-gb-qwerty- English (UK) keyboard
  * en-us-qwerty- English (US) keyboard - **OSK available** **DEFAULT**
  * es-es-qwerty- Spanish keyboard - **OSK available**
  * fr-ch-qwertz- Swiss French keyboard (qwertz)
  * fr-fr-azerty- French keyboard (azerty) - **OSK available**
  * it-it-qwerty- Italian keyboard - **OSK available**
  * ja-jp-qwerty- Japanese keyboard
  * pt-br-qwerty- Portuguese Brazilian keyboard
  * sv-se-qwerty- Swedish keyboard
  * tr-tr-qwerty- Turkish-Q keyboard

# changelog
changelogs:
  - { date: "12.03.22:", desc: "Initial Release." }
